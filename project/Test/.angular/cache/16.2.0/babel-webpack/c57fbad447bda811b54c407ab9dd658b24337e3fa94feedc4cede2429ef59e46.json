{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const roles = route.data['roles'];\n    const userRoles = this.authService.getUserRoles();\n    const canActivate = roles.some(role => userRoles.includes(role));\n    if (!canActivate) {\n      this.router.navigate(['/login']); // Redirect to unauthorized page\n    }\n\n    return canActivate;\n  }\n  shouldDeactivateGuard(currentUrl) {\n    const previousRoute = localStorage.getItem('previousRoute');\n    return previousRoute === '/get-qoute' && currentUrl === '/get-quote';\n  }\n}\n_class = AuthGuard;\n_class.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthGuard };","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","roles","data","userRoles","getUserRoles","some","role","includes","navigate","shouldDeactivateGuard","currentUrl","previousRoute","localStorage","getItem","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\saeedcomp\\3D Objects\\FYP_Frontend\\VIMS\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from './services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const roles = route.data['roles'] as string[];\r\n    const userRoles = this.authService.getUserRoles();\r\n\r\n    const canActivate = roles.some(role => userRoles.includes(role));\r\n\r\n    if (!canActivate) {\r\n      this.router.navigate(['/login']); // Redirect to unauthorized page\r\n    }\r\n\r\n    return canActivate;\r\n  }\r\n  private shouldDeactivateGuard(currentUrl: string): boolean {\r\n    const previousRoute = localStorage.getItem('previousRoute');\r\n\r\n    return previousRoute === '/get-qoute' && currentUrl === '/get-quote';\r\n  }\r\n}\r\n"],"mappings":";;;;AAIA,MAGaA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,KAAK,GAAGF,KAAK,CAACG,IAAI,CAAC,OAAO,CAAa;IAC7C,MAAMC,SAAS,GAAG,IAAI,CAACP,WAAW,CAACQ,YAAY,EAAE;IAEjD,MAAMN,WAAW,GAAGG,KAAK,CAACI,IAAI,CAACC,IAAI,IAAIH,SAAS,CAACI,QAAQ,CAACD,IAAI,CAAC,CAAC;IAEhE,IAAI,CAACR,WAAW,EAAE;MAChB,IAAI,CAACD,MAAM,CAACW,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;;IAGpC,OAAOV,WAAW;EACpB;EACQW,qBAAqBA,CAACC,UAAkB;IAC9C,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAE3D,OAAOF,aAAa,KAAK,YAAY,IAAID,UAAU,KAAK,YAAY;EACtE;;SAnBWhB,SAAS;;mBAATA,MAAS,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATzB,MAAS;EAAA0B,OAAA,EAAT1B,MAAS,CAAA2B,IAAA;EAAAC,UAAA,EAFR;AAAM;SAEP5B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}