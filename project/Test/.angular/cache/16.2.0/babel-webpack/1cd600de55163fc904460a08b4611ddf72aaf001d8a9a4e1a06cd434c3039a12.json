{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginComponent = class LoginComponent {\n  constructor(authService, router, userService, snack) {\n    this.authService = authService;\n    this.router = router;\n    this.userService = userService;\n    this.snack = snack;\n    this.userRoles = [];\n    this.userEmail = '';\n  }\n  ngOnInit() {}\n  onSubmit() {\n    const formData = {\n      username: document.getElementById(\"username\").value,\n      password: document.getElementById(\"password\").value\n    };\n    console.log(\"Form Data\", formData);\n    this.authService.signIn(formData).subscribe(Response => {\n      console.log(Response);\n      if (Response.status == 201 || Response.status == 200) {\n        this.userEmail = Response['body'].email;\n        this.userRoles = Response['body'].roles;\n        this.userService.setUserDetails(this.userEmail, this.userRoles);\n        this.authService.setUserRoles(this.userRoles); // Store user roles in AuthService\n        const previousRoute = localStorage.getItem('previousRoute');\n        if (previousRoute === '/get-qoute') {\n          // Do something specific when coming from '/get-quote'\n          // You can clear the stored route if needed\n          // Now, you can navigate to '/login' or any other logic you need\n          this.router.navigate(['/get-qoute'], {\n            queryParams: {\n              returnUrl: '/get-qoute'\n            },\n            state: {\n              roles: ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_MODERATOR']\n            }\n          });\n          const previousRoute = localStorage.removeItem('previousRoute');\n        } else if (this.userRoles.includes('ROLE_ADMIN')) {\n          this.router.navigateByUrl('/admin-dashboard');\n        } else if (this.userRoles.includes('ROLE_MODERATOR')) {\n          this.router.navigateByUrl('/agent-dashboard');\n        } else if (this.userRoles.includes('ROLE_USER')) {\n          this.router.navigateByUrl('/client-dashboard');\n        }\n        if (Response['body'].success) {\n          console.log(\"Data is \", formData);\n        } else {\n          // Handle registration failure\n        }\n      } else {\n        console.log(\" \");\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","LoginComponent","constructor","authService","router","userService","snack","userRoles","userEmail","ngOnInit","onSubmit","formData","username","document","getElementById","value","password","console","log","signIn","subscribe","Response","status","email","roles","setUserDetails","setUserRoles","previousRoute","localStorage","getItem","navigate","queryParams","returnUrl","state","removeItem","includes","navigateByUrl","success","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\saeedcomp\\3D Objects\\FYP_Frontend\\VIMS\\src\\app\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  userRoles: string[] = [];\r\n  userEmail: string ='';\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private snack: MatSnackBar,\r\n  ) {}\r\n  ngOnInit(): void {\r\n   \r\n  }\r\n\r\n  onSubmit() {\r\n  \r\n    const formData = {\r\n      username: (<HTMLInputElement>document.getElementById(\"username\")).value,\r\n      password: (<HTMLInputElement>document.getElementById(\"password\")).value,\r\n     \r\n    };\r\n    console.log(\"Form Data\",formData);\r\n    \r\n     this.authService.signIn(formData).subscribe((Response) => {\r\n       console.log(Response);\r\n       if (Response.status == 201 || Response.status==200) {\r\n        this.userEmail=Response['body'].email;\r\n        this.userRoles=Response['body'].roles;\r\n        this.userService.setUserDetails(this.userEmail,this.userRoles);\r\n        this.authService.setUserRoles(this.userRoles); // Store user roles in AuthService\r\n        const previousRoute = localStorage.getItem('previousRoute');\r\n\r\n        if (previousRoute === '/get-qoute' ) {\r\n          // Do something specific when coming from '/get-quote'\r\n          // You can clear the stored route if needed\r\n          \r\n      \r\n          // Now, you can navigate to '/login' or any other logic you need\r\n          this.router.navigate(['/get-qoute'], {\r\n            queryParams: { returnUrl: '/get-qoute' },\r\n            state: { roles: ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_MODERATOR'] }\r\n\r\n          });\r\n        const previousRoute = localStorage.removeItem('previousRoute');\r\n\r\n        } \r\n        else if (this.userRoles.includes('ROLE_ADMIN')) {\r\n          this.router.navigateByUrl('/admin-dashboard');\r\n        } else if (this.userRoles.includes('ROLE_MODERATOR')) {\r\n          this.router.navigateByUrl('/agent-dashboard');\r\n        } else if (this.userRoles.includes('ROLE_USER')) {\r\n          this.router.navigateByUrl('/client-dashboard');\r\n        }\r\n\r\n        \r\n        \r\n       \r\n          if (Response['body'].success) {\r\n           console.log(\"Data is \", formData);\r\n         } else {\r\n           // Handle registration failure\r\n         }\r\n       } else {\r\n         console.log(\" \");\r\n       }\r\n     });\r\n     \r\n     \r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}