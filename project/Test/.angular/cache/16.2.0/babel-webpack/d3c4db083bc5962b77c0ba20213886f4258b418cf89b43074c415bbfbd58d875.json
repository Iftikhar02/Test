{"ast":null,"code":"var _class;\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst Register_API = 'http://localhost:8080/api/';\nclass AgentregisterationService {\n  constructor(http) {\n    this.http = http;\n  }\n  registerAgent(requestModel) {\n    return this.http.post(Register_API + 'auth/signupAgent', requestModel, {\n      observe: 'response'\n    });\n  }\n  changeStatusAgent(status) {\n    // Pass parameters in the request URL\n    const params = new HttpParams().set('status', status);\n    // Set headers if needed (adjust Content-Type accordingly)\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n      // Add any other headers if required\n    });\n\n    return this.http.put(Register_API + 'activateAgent', {\n      observe: 'response',\n      headers,\n      params\n    });\n  }\n  showAllAgents(role) {\n    // Pass parameters in the request URL\n    const params = new HttpParams().set('role', role);\n    // Set headers if needed (adjust Content-Type accordingly)\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n      // Add any other headers if required\n    });\n\n    return this.http.get(Register_API + 'getAllByRole', {\n      observe: 'response',\n      headers,\n      params\n    });\n  }\n}\n_class = AgentregisterationService;\n_class.ɵfac = function AgentregisterationService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AgentregisterationService };","map":{"version":3,"names":["HttpHeaders","HttpParams","Register_API","AgentregisterationService","constructor","http","registerAgent","requestModel","post","observe","changeStatusAgent","status","params","set","headers","put","showAllAgents","role","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\saeedcomp\\3D Objects\\FYP_Frontend\\VIMS\\src\\app\\services\\agentregisteration.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nconst Register_API = 'http://localhost:8080/api/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentregisterationService {\n\n  constructor(private http: HttpClient) {}\n\n  registerAgent(requestModel: any): Observable<any> {\n    return this.http.post(Register_API + 'auth/signupAgent', requestModel, { observe: 'response' });\n  }\n\n  changeStatusAgent(status: string): Observable<any> {\n    // Pass parameters in the request URL\n    const params = new HttpParams().set('status', status);\n\n    // Set headers if needed (adjust Content-Type accordingly)\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      // Add any other headers if required\n    });\n\n    return this.http.put(Register_API + 'activateAgent', {  observe: 'response' ,headers, params });\n  }\n  \n\n  showAllAgents(role: string): Observable<any> {\n    // Pass parameters in the request URL\n    const params = new HttpParams().set('role', role);\n\n    // Set headers if needed (adjust Content-Type accordingly)\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      // Add any other headers if required\n    });\n\n    return this.http.get(Register_API + 'getAllByRole', {  observe: 'response' ,headers, params });\n  }\n\n}\n"],"mappings":";AAAA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;;;AAI1E,MAAMC,YAAY,GAAG,4BAA4B;AAEjD,MAGaC,yBAAyB;EAEpCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,aAAaA,CAACC,YAAiB;IAC7B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAACN,YAAY,GAAG,kBAAkB,EAAEK,YAAY,EAAE;MAAEE,OAAO,EAAE;IAAU,CAAE,CAAC;EACjG;EAEAC,iBAAiBA,CAACC,MAAc;IAC9B;IACA,MAAMC,MAAM,GAAG,IAAIX,UAAU,EAAE,CAACY,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC;IAErD;IACA,MAAMG,OAAO,GAAG,IAAId,WAAW,CAAC;MAC9B,cAAc,EAAE;MAChB;KACD,CAAC;;IAEF,OAAO,IAAI,CAACK,IAAI,CAACU,GAAG,CAACb,YAAY,GAAG,eAAe,EAAE;MAAGO,OAAO,EAAE,UAAU;MAAEK,OAAO;MAAEF;IAAM,CAAE,CAAC;EACjG;EAGAI,aAAaA,CAACC,IAAY;IACxB;IACA,MAAML,MAAM,GAAG,IAAIX,UAAU,EAAE,CAACY,GAAG,CAAC,MAAM,EAAEI,IAAI,CAAC;IAEjD;IACA,MAAMH,OAAO,GAAG,IAAId,WAAW,CAAC;MAC9B,cAAc,EAAE;MAChB;KACD,CAAC;;IAEF,OAAO,IAAI,CAACK,IAAI,CAACa,GAAG,CAAChB,YAAY,GAAG,cAAc,EAAE;MAAGO,OAAO,EAAE,UAAU;MAAEK,OAAO;MAAEF;IAAM,CAAE,CAAC;EAChG;;SAjCWT,yBAAyB;;mBAAzBA,MAAyB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAzBnB,MAAyB;EAAAoB,OAAA,EAAzBpB,MAAyB,CAAAqB,IAAA;EAAAC,UAAA,EAFxB;AAAM;SAEPtB,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}